//! Types describing effects, and eventually functions to help the UI draw them.
//! This is just a sketch, a minimal schematization generated by a brainstorming
//! session. This dirt simple tripartite schema supplies the bare minimum hints
//! required for a UI to make aesthetically meaningful decisions about what
//! views and controls to use for an attribute when there are multiple
//! topologically compatible views and controls to choose from. This schema is
//! just a placeholder. Eventually we'll probably create an extensible ontology
//! of structured annotations. The big idea is that profile authors should not
//! need to do much more than declare Topos and map attributes into supported
//! protocols. The GUI should just adapt to the profile.
//!
//! Conceptually, types, subtypes, and subsubtypes exist in a 3D space of
//! options. Currently there are about 1000 option combinations total.
//! Many valid combinations don't actually make aesthetic sense.
//!
//! These type hints must not impact DMX rendering! They may impact the
//! display of previews, icons, or controls in your onscreen controller.

/// Specify the major aesthetic effect of changing some particular attribute.
pub enum EffectType {
    Misc              =   0,
    ModeSelect        =   1,
    Color             =   2,
    Dimmer            =   3,
    Relay             =   4,
    Focus             =   5,
    Zoom              =   6,
    Iris              =   7,
    Frame             =   8,
    Strobe            =   9,
    Position          =  10,
    Orientation       =  11,
    Transform         =  12,
    FilterSelect      =  13, // e.g. litho index
    FilterIntensity   =  14, // e.g. frost (should frost get its own filter type?)
    Raster            =  15,
    Control           =  16,
    Smoothing         =  17,
}

/// Specify the minor details of the aesthetic effect of changing some
/// particular attribute.
/// TODO: Figure out how to extensibly schematize colorspaces, which are all
/// over the map for disco lights and moving lights.
pub enum EffectSubtype {
    Other               =  0,
    ColorspaceRgb       =  1, // red + green + blue
    ColorspaceHsb       =  2, // hue + saturation + brightness
    ColorspaceRgbi      =  3, // i = intensity multiplied
    ColorspaceRgbw      =  4, // w = white added
    ColorspaceRgbaw     =  5, // a = amber added
    ColorspaceHsl       =  6,
    Colorspace1x        =  7, // one mono filter such as a dichro
    Colorspace2x        =  8, // two mono filters
    Colorspace3x        =  9, // etc.
    Colorspace4x        = 10,
    Colorspace5x        = 11,
    ColorspaceI1x       = 12, // intensity + one mono filter such as a dichro
    ColorspaceI2x       = 13, // intensity + two mono filters
    ColorspaceI3x       = 14, // etc.
    ColorspaceI4x       = 15,
    ColorspaceI5x       = 16,
    ColorspaceI         = 17, // just intensity, a.k.a. grayscale or dimmer
    TransformRotate     = 18,
    TransformScroll     = 19,
    TransformTranslate  = 20,
    FilterMisc          = 21, // e.g. an effects wheel where each slot does something different
    FilterMultiply      = 22, // e.g. prism, pyramid mirror, barrel mirror, moonflower mirror, disco ball
    FilterDistort       = 23, // e.g. textured glass
    FilterSubtract      = 24, // e.g. vignette, gobo
    FilterAdd           = 25, // e.g. laser on technobeam
    OrientationMirror   = 26,
    OrientationYoke     = 27,
    FrameNWSE           = 28,
}

/// Specify extra details about the aesthetic effect of changing some particular
/// attribute. Concretely this means giving the UI some hints about whether this
/// should be presented as a time-domain effect, and if so, whether the
/// attribute values are denominated as cyclical frequency, cyclical wavelength,
/// or acyclic duration.
pub enum EffectSubsubtype {
    Value     = 0, // e.g. intensity, must be 0
    Frequency = 1, // e.g. rotation speed
    Wavelength= 2, // e.g. periodic laminar flow waterspout length
    Duration  = 3, // e.g. mspeed smoothing time
}
