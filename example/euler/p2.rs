//! Problem 2 from project euler
//! Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//!
//! 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//!
//! By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

/// Function to calculate the next fionacci number from the last two, and collect
/// running sum if it is even, recursively
fn fib_sum_even(sum: uint, last: uint, last_last: uint, max: uint) -> uint {
	let next_fib = last + last_last;

	// return the sum if we're over the max
	if next_fib > max {
		sum
	}

	// otherwise, if this number is even, add it to the sum
	else if next_fib % 2 == 0 {
		fib_sum_even(sum + next_fib, next_fib, last, max)
	}

	// if not even, continue without increasing the sum
	else {
		fib_sum_even(sum, next_fib, last, max)
	}
}

fn main() {
	let ans = fib_sum_even(0, 1, 0, 4000000);
	println!("{:?}",ans);
}